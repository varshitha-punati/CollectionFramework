{\rtf1\ansi\ansicpg1252\deff0\nouicompat\deflang1033{\fonttbl{\f0\fnil\fcharset0 Calibri;}{\f1\fnil\fcharset2 Symbol;}}
{\*\generator Riched20 10.0.18362}\viewkind4\uc1 
\pard\sa200\sl276\slmult1\b\f0\fs22\lang9\tab\tab\tab\tab\fs28 CollectionFramework\par
\fs24 what is collection?\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li720\sa200\sl276\slmult1\b0\fs22 Group of Objects is a collection\par

\pard\sa200\sl276\slmult1 For example:\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li720\sa200\sl276\slmult1 We have multiple students in a class student1,student2,student3 these all together are called as collection of students\par
{\pntext\f1\'B7\tab}So,Collection is a single entity representing multiple Objects\par

\pard\sa200\sl276\slmult1\b\fs24 What is collection Framework?\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li720\sa200\sl276\slmult1\b0\fs22 In java, to represent the group of objects in  to a single Entity we need certain number of classes and Interfaces.\par
{\pntext\f1\'B7\tab}So,collectionFramework defines that  different types interfaces and classes by which  we can represent  the group of Objects into a collection\par

\pard\sa200\sl276\slmult1\b\fs24 Why do we need Collection?\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li720\sa200\sl276\slmult1\b0 suppose I want to store 100 elements.\par
{\pntext\f1\'B7\tab}so,first I used variable to store the elements\par

\pard\sa200\sl276\slmult1\tab int a=1;\par
\tab int b=2;\par
\tab ---------100;\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li720\sa200\sl276\slmult1 It is very typical for storing 100 elements using variables\par
{\pntext\f1\'B7\tab}so,I  used array to store the elements\par
{\pntext\f1\'B7\tab}int arr[]=new size[5];\par
{\pntext\f1\'B7\tab}So,By using array I used to store the elements\par
{\pntext\f1\'B7\tab}But In arrays there are some disadvantages of Arrays\fs22\par
{\pntext\f1\'B7\tab}In object array problem is limited size i.e\par

\pard\sa200\sl276\slmult1\tab 1. Fixed in size(are not growable in nature)\par
\tab 2.Suppose the size is 5 if i used only 3 memory Location then wastage of Memory.\par
\tab 3.They will not use any underlying datastructure.so,it cannot support any readymade \tab methods..means i want to sort or search an element there will be no predefined \tab methods\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li720\sa200\sl276\slmult1 So to overcome these problems we use collectionFramework\par

\pard\sa200\sl276\slmult1\b\fs24 Advantages of collection types:\par
\b0\fs22 1.Growable in nature\par
2.Homogeneous dataelements and Hetrogeneous element\par
3.Implemented by using underlying datastructure.\par
eg:if I created an arraylist we need not to write the logic for sort serach etc.. there are readymade methods available like sort,search\par
\b what are interfaces and classes available in collection framework?\par
collection interface:\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li720\sa200\sl276\slmult1\b0 It is root interface \par
{\pntext\f1\'B7\tab}In collection Interface is used to represent group of objects as single entity and which contains common methods which are required for other collections.\par

\pard\sa200\sl276\slmult1\b what is Collections?\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li720\sa200\sl276\slmult1\b0 Collections in java is a  predefined class which is from java.util package\par
{\pntext\f1\'B7\tab}Collections contains some methods those methods are used to perform several opeartions on collection Objects\par
{\pntext\f1\'B7\tab}Collection interface contains child Interface like list interface,Set interface and Queue inteface.\par

\pard\sa200\sl276\slmult1\b List Interface:\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li720\sa200\sl276\slmult1\b0 List is a child interface on collection Interface.\par
{\pntext\f1\'B7\tab}Store group of elements in sorted Order\par
{\pntext\f1\'B7\tab}Whatever i entered in the collection same order should maintain i.e. , Insertion Order should be mainted.\par
{\pntext\f1\'B7\tab}duplicates also should allow In thoses cases we go for List\par

\pard\sa200\sl276\slmult1\b List classes\b0 :\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li720\sa200\sl276\slmult1 list is implemented by these classes.\par

\pard\sa200\sl276\slmult1 1.ArrayList\par
2.LinkedList\par
3.Vector--legacy classes\par
\b Set Interface :\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li720\sa200\sl276\slmult1\b0 Set is a child interface on collection Interface.\par
{\pntext\f1\'B7\tab}insertion order not preserved.\par
{\pntext\f1\'B7\tab}duplicates not allowed.\par

\pard\sa200\sl276\slmult1\b Set classes:\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li720\sa200\sl276\slmult1\b0 set is implemented by these classes.\par

\pard\sa200\sl276\slmult1 1.Hashset\par
2.LinkedHashset\par
3.TreeSet\par
\par
\b Queue:(Extends Collection Interface)\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li720\sa200\sl276\slmult1\b0 Queue is child  interface of Collection Interface.\par
{\pntext\f1\'B7\tab}Suppose we have different list of Emails eg having 1000 emails if i want to send the the mail to this 1000 emails we can send the mail to all at sametime..first it will send to first guy and after 2nd,3rd like that..\par

\pard\sa200\sl276\slmult1\b Queue classes\b0 :\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li720\sa200\sl276\slmult1 Queue is implemnted by these classes.\par

\pard\sa200\sl276\slmult1 1.PriorityQueue\par
\par
\b Map interface:\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li720\sa200\sl276\slmult1\b0 Map does not extends Collection Interface\par
{\pntext\f1\'B7\tab}A map contains values on the basis of key, i.e. key and value pair. Each key and value pair is known as an entry. A Map contains unique keys.\par
{\pntext\f1\'B7\tab}A Map is useful if you have to search, update or delete elements on the basis of a key.\par

\pard\sa200\sl276\slmult1\b Map classes:\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li720\sa200\sl276\slmult1\b0 Map is implemented by these classes.\par

\pard\sa200\sl276\slmult1 1.HashMap\par
2.LinkedHashMap\par
3.TreeMap\par
\b\fs24 Iterators:\par
\b0\fs22 Iterators are used in Collection framework in Java to retrieve elements one by one. There are three iterators.\par
\b Enumeration:\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li720\sa200\sl276\slmult1\b0 It is a interface used to get elements of legacy collections(Vector, Hashtable). Enumeration is the first iterator present from JDK 1.0, rests are included in JDK 1.2 with more functionality.\par

\pard\sa200\sl276\slmult1 // Here "v" is an Vector class object. e is of\par
// type Enumeration interface and refers to "v"\par
Enumeration e = v.elements();\par
\b There are two methods in Enumeration interface namely :\par
\b0 //1. Tests if this enumeration contains more elements\par
public boolean hasMoreElements();\par
\par
// 2.Returns the next element of this enumeration \par
// It throws NoSuchElementException\par
// if no more element present\par
public Object nextElement();\par
\b Limitations of Enumeration :\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li720\sa200\sl276\slmult1\b0 Enumeration is for legacy classes(Vector, Hashtable) only. Hence it is not a universal iterator.\par
{\pntext\f1\'B7\tab}Remove operations can\rquote t be performed using Enumeration.\par
{\pntext\f1\'B7\tab}Only forward direction iterating is possible.\par

\pard\sa200\sl276\slmult1\b Iterator:\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li720\sa200\sl276\slmult1\b0 It is a universal iterator as we can apply it to any Collection object. By using Iterator, we can perform both read and remove operations. It is improved version of Enumeration with additional functionality of remove-ability of a element.\par
{\pntext\f1\'B7\tab}Iterator must be used whenever we want to enumerate elements in all Collection framework implemented interfaces like Set, List, Queue, Deque and also in all implemented classes of Map interface. Iterator is the only cursor available for entire collection framework.\par
{\pntext\f1\'B7\tab}Iterator object can be created by calling iterator() method present in Collection interface.\par
{\pntext\f1\'B7\tab}Iterator object can be created by calling iterator() method present in Collection interface.\par

\pard\sa200\sl276\slmult1\par
// Here "c" is any Collection object. itr is of\par
// type Iterator interface and refers to "c"\par
Iterator itr = c.iterator();\par
Iterator interface defines three methods:\par
\par
// Returns true if the iteration has more elements\par
public boolean hasNext();\par
\par
// Returns the next element in the iteration\par
// It throws NoSuchElementException if no more \par
// element present\par
public Object next();\par
\par
// Remove the next element in the iteration\par
// This method can be called only once per call\par
// to next()\par
public void remove();\par
\b Limitations of Iterator :\b0\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li720\sa200\sl276\slmult1 Only forward direction iterating is possible.\par
{\pntext\f1\'B7\tab}Replacement and addition of new element is not supported by Iterator.\par

\pard\sa200\sl276\slmult1\b\fs28 Java ListIterator:\b0\fs22\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li720\sa200\sl276\slmult1 Like Iterator, ListIterator is a Java Iterator, which is used to iterate elements one-by-one from a List implemented object.\par
{\pntext\f1\'B7\tab}It is available since Java 1.2.\par
{\pntext\f1\'B7\tab}It extends Iterator interface.\par
{\pntext\f1\'B7\tab}It is useful only for List implemented classes.\par
{\pntext\f1\'B7\tab}Unlike Iterator, It supports all four operations: CRUD (CREATE, READ, UPDATE and DELETE).\par
{\pntext\f1\'B7\tab}Unlike Iterator, It supports both Forward Direction and Backward Direction iterations.\par
{\pntext\f1\'B7\tab}It is a Bi-directional Iterator.\par

\pard\sa200\sl276\slmult1\b What is CRUD operations in Collection API?\par
\b0 CREATE: Adding new elements to Collection object.\par
READ: Retrieving elements from Collection object.\par
UPDATE: Updating or setting existing elements in Collection object.\par
DELETE: Removing elements from Collection object.\par

\pard\sa200\sl276\slmult1\b\fs28 Comparator Interface:\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li720\sa200\sl276\slmult1\b0\fs22 Java Comparator interface is used to order the objects of a user-defined class.\par
{\pntext\f1\'B7\tab}This interface is found in java.util package and contains 2 methods compare(Object obj1,Object obj2) and equals(Object element).\par
{\pntext\f1\'B7\tab}It provides multiple sorting sequences, i.e., you can sort the elements on the basis of any data member, for example, rollno, name, age or anything else.\par

\pard\sa200\sl276\slmult1 public int compare(Object obj1, Object obj2):\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li720\sa200\sl276\slmult1 It compares the first object with the second object.\par

\pard\sa200\sl276\slmult1 public boolean equals(Object obj):\tab\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li720\sa200\sl276\slmult1 It is used to compare the current object with the specified object.\par

\pard\sa200\sl276\slmult1 public boolean equals(Object obj):\tab\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li720\sa200\sl276\slmult1 It is used to compare the current object with the specified object.\par

\pard\sa200\sl276\slmult1\b\fs28 Comparable interface:\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li720\sa200\sl276\slmult1\b0\fs24 Java Comparable interface is used to order the objects of the user-defined class. \par
{\pntext\f1\'B7\tab}This interface is found in java.lang package and contains only one method named compareTo(Object). \par
{\pntext\f1\'B7\tab}It provides a single sorting sequence only, i.e., you can sort the elements on the basis of single data member only. \par

\pard\sa200\sl276\slmult1 For example, it may be rollno, name, age or anything else.\par

\pard\sa200\sl276\slmult1\b\fs22 compareTo(Object obj) method:\par
public int compareTo(Object obj)\b0 : It is used to compare the current object with the specified object. It returns\par
positive integer, if the current object is greater than the specified object.\par
negative integer, if the current object is less than the specified object.\par
zero, if the current object is equal to the specified object.\par
\b\fs28 Difference between Comparator and Comparable Interface\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li720\sa200\sl276\slmult1\b0\fs24 comparable and comparator both are interfaces\sub  \nosupersub provide way of sorting to group of object or Collection.\par
{\pntext\f1\'B7\tab}comparable interface is present in java.lang package.\par
{\pntext\f1\'B7\tab}comparator interface is present in java.util package.\par
{\pntext\f1\'B7\tab}Comparable interface can be used to achieve single way of sorting like ascending or descending sorting order for numerical collection or alphabetical for string object collection\par
{\pntext\f1\'B7\tab}comparator interface  can be used to acheive multiple way of sorting.\par

\pard\sa200\sl276\slmult1 without comparable and comparator interface :\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li720\sa200\sl276\slmult1 Array.sort method from java.util.Arrays class can be used to sort primitive type arrays.\par
{\pntext\f1\'B7\tab}collections.sort method from java.util.Collections class can be used to sort Object Arrays.\par

\pard\sa200\sl276\slmult1\b\fs28\par
}
 